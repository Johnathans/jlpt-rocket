const JishoAPI = require('unofficial-jisho-api')
const { createClient } = require('@supabase/supabase-js')
const { v4: uuidv4 } = require('uuid')
const fs = require('fs')
require('dotenv').config({ path: '.env.local' })

// Initialize APIs
const jisho = new JishoAPI()

// Initialize Supabase client
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

let supabase = null
if (supabaseUrl && supabaseKey) {
  supabase = createClient(supabaseUrl, supabaseKey)
  console.log('‚úì Supabase client initialized')
} else {
  console.log('‚ö†Ô∏è  Supabase not configured - will save to JSON file instead')
}

// Comprehensive list of N5 vocabulary to search for
const N5_VOCABULARY_LIST = [
  // Pronouns and basic words
  'ÁßÅ', '„ÅÇ„Å™„Åü', '„Åì„Çå', '„Åù„Çå', '„ÅÇ„Çå', '„Åì„Åì', '„Åù„Åì', '„ÅÇ„Åù„Åì', '„Å©„Åì', '„Å†„Çå', '‰Ωï', '„ÅÑ„Å§', '„Å©„ÅÜ', '„Å©„ÅÆ', '„Å©„Çì„Å™',
  
  // Numbers
  '‰∏Ä', '‰∫å', '‰∏â', 'Âõõ', '‰∫î', 'ÂÖ≠', '‰∏É', 'ÂÖ´', '‰πù', 'ÂçÅ', 'Áôæ', 'ÂçÉ', '‰∏á',
  '„ÅÑ„Å°', '„Å´', '„Åï„Çì', '„Çà„Çì', '„Åî', '„Çç„Åè', '„Å™„Å™', '„ÅØ„Å°', '„Åç„ÇÖ„ÅÜ', '„Åò„ÇÖ„ÅÜ',
  
  // Time expressions
  '‰ªäÊó•', 'Êò®Êó•', 'ÊòéÊó•', '‰ªä', 'Êúù', 'Êòº', 'Â§ú', 'ÊôÇÈñì', 'ÂàÜ', 'Áßí', 'Âπ¥', 'Êúà', 'Êó•', 'ÈÄ±Èñì',
  'ÊúàÊõúÊó•', 'ÁÅ´ÊõúÊó•', 'Ê∞¥ÊõúÊó•', 'Êú®ÊõúÊó•', 'ÈáëÊõúÊó•', 'ÂúüÊõúÊó•', 'Êó•ÊõúÊó•',
  '‰∏ÄÊúà', '‰∫åÊúà', '‰∏âÊúà', 'ÂõõÊúà', '‰∫îÊúà', 'ÂÖ≠Êúà', '‰∏ÉÊúà', 'ÂÖ´Êúà', '‰πùÊúà', 'ÂçÅÊúà', 'ÂçÅ‰∏ÄÊúà', 'ÂçÅ‰∫åÊúà',
  'Êò•', 'Â§è', 'Áßã', 'ÂÜ¨',
  
  // Family
  'ÂÆ∂Êóè', 'Áà∂', 'ÊØç', 'ÂÖÑ', 'Âßâ', 'Âºü', 'Â¶π', 'Â≠ê‰æõ', 'Ëµ§„Å°„ÇÉ„Çì', 'Á•ñÁà∂', 'Á•ñÊØç', '‰∏°Ë¶™',
  '„ÅäÁà∂„Åï„Çì', '„ÅäÊØç„Åï„Çì', '„ÅäÂÖÑ„Åï„Çì', '„ÅäÂßâ„Åï„Çì', 'Âºü„Åï„Çì', 'Â¶π„Åï„Çì',
  
  // People and occupations
  'ÂèãÈÅî', 'ÂÖàÁîü', 'Â≠¶Áîü', 'ÂåªËÄÖ', '‰ºöÁ§æÂì°', 'Â∫óÂì°', 'ÈÅãËª¢Êâã', '‰∫∫', 'Áî∑', 'Â•≥', 'Â§ß‰∫∫',
  
  // Places
  'Â≠¶Ê†°', 'Â§ßÂ≠¶', 'ÁóÖÈô¢', 'ÈäÄË°å', 'ÈÉµ‰æøÂ±Ä', 'ÈßÖ', 'Á©∫Ê∏Ø', 'Â∫ó', '„É¨„Çπ„Éà„É©„É≥', '„Éõ„ÉÜ„É´',
  'ÂÆ∂', 'ÈÉ®Â±ã', 'Âè∞ÊâÄ', 'ÂØùÂÆ§', 'È¢®ÂëÇ', '„Éà„Ç§„É¨', 'Â∫≠', 'ÁéÑÈñ¢', 'Á™ì', '„Éâ„Ç¢',
  'ÂõΩ', 'Áî∫', 'Â∏Ç', 'Êùë', 'ÈÅì', 'Ê©ã', 'ÂÖ¨Âúí', 'Âõ≥Êõ∏È§®', 'Êò†ÁîªÈ§®',
  
  // Transportation
  'Ëªä', 'ÈõªËªä', '„Éê„Çπ', '„Çø„ÇØ„Ç∑„Éº', 'È£õË°åÊ©ü', 'Ëá™Ëª¢Ëªä', 'Ëàπ', 'Âú∞‰∏ãÈâÑ', 'ÂàáÁ¨¶',
  
  // Food and drink
  'È£ü„ÅπÁâ©', 'È£≤„ÅøÁâ©', 'Ê∞¥', '„ÅäËå∂', '„Ç≥„Éº„Éí„Éº', '„Éì„Éº„É´', '„Ç∏„É•„Éº„Çπ', 'Áâõ‰π≥', '„ÉØ„Ç§„É≥',
  '„ÅîÈ£Ø', '„Éë„É≥', 'ËÇâ', 'È≠ö', 'ÈáéËèú', 'ÊûúÁâ©', 'Âçµ', '„ÉÅ„Éº„Ç∫', 'Á†ÇÁ≥ñ', 'Â°©',
  'Êúù„ÅîÈ£Ø', 'Êòº„ÅîÈ£Ø', 'Êô©„ÅîÈ£Ø', 'Â§ïÈ£ü', 'ÊòºÈ£ü', 'ÊúùÈ£ü', '„É¨„Çπ„Éà„É©„É≥',
  
  // Clothing
  'Êúç', '„Ç∑„É£„ÉÑ', '„Ç∫„Éú„É≥', '„Çπ„Ç´„Éº„Éà', 'Èù¥', 'Â∏ΩÂ≠ê', 'ÊôÇË®à', 'ÁúºÈè°', '„Åã„Å∞„Çì',
  
  // Body parts
  'È†≠', 'È°î', 'ÁõÆ', 'Èºª', 'Âè£', 'ËÄ≥', 'Êâã', 'Ë∂≥', '‰Ωì', 'È´™', 'Ê≠Ø',
  
  // Colors
  'Ëµ§', 'Èùí', 'ÈªÑËâ≤', 'Á∑ë', 'ÁôΩ', 'Èªí', 'Ëå∂Ëâ≤', '„Éî„É≥„ÇØ',
  
  // Adjectives
  'Â§ß„Åç„ÅÑ', 'Â∞è„Åï„ÅÑ', 'È´ò„ÅÑ', 'ÂÆâ„ÅÑ', 'Êñ∞„Åó„ÅÑ', 'Âè§„ÅÑ', 'ËâØ„ÅÑ', 'ÊÇ™„ÅÑ', 'Èï∑„ÅÑ', 'Áü≠„ÅÑ',
  'Êöë„ÅÑ', 'ÂØí„ÅÑ', 'Êöñ„Åã„ÅÑ', 'Ê∂º„Åó„ÅÑ', 'ÁÜ±„ÅÑ', 'ÂÜ∑„Åü„ÅÑ', 'Èáç„ÅÑ', 'ËªΩ„ÅÑ',
  'Èù¢ÁôΩ„ÅÑ', '„Å§„Åæ„Çâ„Å™„ÅÑ', 'Èõ£„Åó„ÅÑ', 'Êòì„Åó„ÅÑ', 'Âøô„Åó„ÅÑ', 'Êöá', 'ÂÖÉÊ∞ó', 'ÁóÖÊ∞ó',
  'Áæé„Åó„ÅÑ', '„Åç„Çå„ÅÑ', 'Ê±ö„ÅÑ', 'Èùô„Åã', '„Å´„Åé„ÇÑ„Åã', 'ÊúâÂêç', '‰æøÂà©', '‰∏ç‰æø',
  
  // Verbs (dictionary form)
  'Ë°å„Åè', 'Êù•„Çã', 'Â∏∞„Çã', 'Âá∫„Çã', 'ÂÖ•„Çã', '‰πó„Çã', 'Èôç„Çä„Çã', 'Ê≠©„Åè', 'Ëµ∞„Çã', 'Ê≥≥„Åê', 'È£õ„Å∂',
  'È£ü„Åπ„Çã', 'È£≤„ÇÄ', '‰Ωú„Çã', 'Ë≤∑„ÅÜ', 'Â£≤„Çã', 'Ë™≠„ÇÄ', 'Êõ∏„Åè', 'ËÅû„Åè', 'Ë©±„Åô', 'Ë¶ã„Çã', '‰ºö„ÅÜ',
  'ÂØù„Çã', 'Ëµ∑„Åç„Çã', 'Á´ã„Å§', 'Â∫ß„Çã', '‰ºë„ÇÄ', 'ÂÉç„Åè', 'ÂãâÂº∑„Åô„Çã', 'ÈÅä„Å∂', 'Ê¥ó„ÅÜ', 'ÁùÄ„Çã',
  '„ÅÇ„Çã', '„ÅÑ„Çã', '„Åô„Çã', '„Å™„Çã', '„Åß„Åç„Çã', '„Çè„Åã„Çã', 'Áü•„Çã', 'ÊÄù„ÅÜ', 'Ë®Ä„ÅÜ', 'Èñã„Åè', 'Èñâ„ÇÅ„Çã',
  'Âßã„Åæ„Çã', 'ÁµÇ„Çè„Çã', 'Ê≠¢„Åæ„Çã', 'Êõ≤„Åå„Çã', 'Ê∏°„Çã', 'ÊåÅ„Å§', 'Âèñ„Çã', 'ÁΩÆ„Åè', 'Ë≤∏„Åô', 'ÂÄü„Çä„Çã',
  
  // Weather
  'Â§©Ê∞ó', 'Èõ®', 'Èõ™', 'È¢®', 'Èõ≤', 'Â§™ÈôΩ', 'Êúà', 'Êòü', 'Á©∫',
  
  // School and study
  'Êú¨', '„Éö„É≥', 'ÈâõÁ≠Ü', 'Á¥ô', 'Êú∫', 'Ê§ÖÂ≠ê', '„Åã„Å∞„Çì', 'ËæûÊõ∏', 'ÂÆøÈ°å', 'Ë©¶È®ì', 'ÊéàÊ•≠',
  
  // Money and shopping
  '„ÅäÈáë', 'ÂÜÜ', '„Éâ„É´', 'Ë≤°Â∏É', '„Ç´„Éº„Éâ', 'ÂÄ§ÊÆµ', 'ÂÆâ„ÅÑ', 'È´ò„ÅÑ',
  
  // Entertainment
  'Èü≥Ê•Ω', 'Êò†Áîª', '„ÉÜ„É¨„Éì', '„É©„Ç∏„Ç™', 'Êñ∞ËÅû', 'ÈõëË™å', 'ÂÜôÁúü', '„Ç≤„Éº„É†', '„Çπ„Éù„Éº„ÉÑ',
  
  // Common expressions
  '„ÅØ„ÅÑ', '„ÅÑ„ÅÑ„Åà', '„Å°„Çá„Å£„Å®', '„Å®„Å¶„ÇÇ', '„ÅÇ„Åæ„Çä', '„Åú„Çì„Åú„Çì', '„ÇÇ„ÅÜ', '„Åæ„Å†',
  '„Åì„Çì„Å´„Å°„ÅØ', '„Åä„ÅØ„Çà„ÅÜ', '„Åì„Çì„Å∞„Çì„ÅØ', '„Åï„Çà„ÅÜ„Å™„Çâ', '„ÅÇ„Çä„Åå„Å®„ÅÜ', '„Åô„Åø„Åæ„Åõ„Çì',
  '„Å©„ÅÜ„Åû', '„Å©„ÅÜ„ÇÇ', '„Åù„ÅÜ„Åß„Åô', '„Åù„ÅÜ„Åß„Åô„Å≠', '„ÅÑ„ÅÑ„Åß„Åô', '„Å†„ÇÅ',
  
  // Additional common words
  'ÂïèÈ°å', 'Á≠î„Åà', 'Ë≥™Âïè', 'ÊÑèÂë≥', 'ÂêçÂâç', '‰ΩèÊâÄ', 'ÈõªË©±', 'Áï™Âè∑', 'Âπ¥ÈΩ¢',
  '‰ªï‰∫ã', '‰ºöÁ§æ', '‰ºë„Åø', 'ÊóÖË°å', 'Ë≤∑„ÅÑÁâ©', 'ÊñôÁêÜ', 'ÊéÉÈô§', 'Ê¥óÊøØ',
  'Áä¨', 'Áå´', 'È≥•', 'Ëä±', 'Êú®', 'Â±±', 'Êµ∑', 'Â∑ù', 'Êπñ'
]

async function searchVocabularyWord(word) {
  try {
    console.log(`Searching: ${word}`)
    
    const result = await jisho.searchForPhrase(word)
    
    if (!result.data || result.data.length === 0) {
      console.log(`  ‚ùå No results for: ${word}`)
      return null
    }

    const firstResult = result.data[0]
    
    // Check if it has JLPT N5 tag or is common
    const hasN5Tag = firstResult.tags?.some(tag => 
      tag.toLowerCase().includes('jlpt n5') || 
      tag.toLowerCase().includes('jlpt-n5')
    )
    
    const isCommon = firstResult.is_common
    
    // Extract Japanese word and reading
    const japanese = firstResult.japanese?.[0]
    if (!japanese) {
      console.log(`  ‚ùå No Japanese data for: ${word}`)
      return null
    }

    const wordText = japanese.word || japanese.reading || word
    const reading = japanese.reading || word
    
    // Extract English meanings
    const meanings = firstResult.senses
      ?.flatMap(sense => sense.english_definitions || [])
      .slice(0, 3)
      .join('; ')

    if (!meanings) {
      console.log(`  ‚ùå No meanings for: ${word}`)
      return null
    }

    // Extract parts of speech
    const partsOfSpeech = firstResult.senses
      ?.flatMap(sense => sense.parts_of_speech || [])
      .filter((pos, index, arr) => arr.indexOf(pos) === index)
      .slice(0, 2)
      .join(', ')

    // Extract kanji characters
    const kanjiRegex = /[\u4e00-\u9faf]/g
    const kanjiUsed = wordText.match(kanjiRegex) || []

    const entry = {
      id: uuidv4(),
      word: wordText,
      reading: reading,
      meaning: meanings,
      part_of_speech: partsOfSpeech || 'noun',
      jlpt_level: 'N5',
      frequency_rank: 0,
      kanji_used: kanjiUsed,
      example_sentence: `${wordText}„Åß„Åô„ÄÇ`,
      example_translation: `It is ${meanings.split(';')[0]}.`,
      has_n5_tag: hasN5Tag,
      is_common: isCommon
    }

    console.log(`  ‚úì Added: ${wordText} (${reading}) - ${meanings}`)
    return entry

  } catch (error) {
    console.error(`  ‚ùå Error searching for ${word}:`, error.message)
    return null
  }
}

async function saveToFile(data, filename = 'n5-vocabulary-proper.json') {
  try {
    const jsonData = JSON.stringify(data, null, 2)
    fs.writeFileSync(filename, jsonData, 'utf8')
    console.log(`‚úÖ Saved ${data.length} vocabulary entries to ${filename}`)
  } catch (error) {
    console.error('Error saving to file:', error)
  }
}

async function saveToSupabase(data) {
  if (!supabase) {
    console.log('‚ö†Ô∏è  Supabase not configured, skipping database insert')
    return false
  }

  try {
    console.log('Inserting into Supabase...')
    
    // Insert in batches of 50
    const batchSize = 50
    let totalInserted = 0
    
    for (let i = 0; i < data.length; i += batchSize) {
      const batch = data.slice(i, i + batchSize)
      
      const { data: insertedData, error } = await supabase
        .from('vocabulary')
        .insert(batch)
        .select()

      if (error) {
        console.error('Error inserting batch:', error)
        return false
      }

      totalInserted += insertedData?.length || 0
      console.log(`‚úì Inserted batch ${Math.floor(i/batchSize) + 1}: ${insertedData?.length || 0} entries`)
    }
    
    console.log(`‚úÖ Successfully inserted ${totalInserted} vocabulary entries into Supabase`)
    return true
    
  } catch (error) {
    console.error('Error inserting into Supabase:', error)
    return false
  }
}

async function main() {
  console.log('üöÄ Starting proper N5 vocabulary collection using Jisho API...\n')
  console.log(`üìù Processing ${N5_VOCABULARY_LIST.length} N5 vocabulary words...\n`)
  
  const vocabularyEntries = []
  
  for (let i = 0; i < N5_VOCABULARY_LIST.length; i++) {
    const word = N5_VOCABULARY_LIST[i]
    
    const entry = await searchVocabularyWord(word)
    if (entry) {
      entry.frequency_rank = vocabularyEntries.length + 1
      vocabularyEntries.push(entry)
    }
    
    // Rate limiting - 500ms between requests
    await new Promise(resolve => setTimeout(resolve, 500))
    
    // Progress update every 50 words
    if ((i + 1) % 50 === 0) {
      console.log(`\nüìä Progress: ${i + 1}/${N5_VOCABULARY_LIST.length} words processed, ${vocabularyEntries.length} entries collected\n`)
    }
  }

  console.log(`\nüìä Final Results:`)
  console.log(`- Words processed: ${N5_VOCABULARY_LIST.length}`)
  console.log(`- Vocabulary entries collected: ${vocabularyEntries.length}`)
  console.log(`- Success rate: ${((vocabularyEntries.length / N5_VOCABULARY_LIST.length) * 100).toFixed(1)}%`)
  
  // Count entries with N5 tags vs common words
  const withN5Tags = vocabularyEntries.filter(e => e.has_n5_tag).length
  const commonWords = vocabularyEntries.filter(e => e.is_common).length
  
  console.log(`- With JLPT N5 tags: ${withN5Tags}`)
  console.log(`- Marked as common: ${commonWords}`)
  
  // Save to JSON file
  await saveToFile(vocabularyEntries, 'n5-vocabulary-proper.json')
  
  // Try to save to Supabase
  const supabaseSuccess = await saveToSupabase(vocabularyEntries)
  
  console.log('\n‚úÖ N5 vocabulary collection completed!')
  console.log(`üìÅ Data saved to: n5-vocabulary-proper.json`)
  if (supabaseSuccess) {
    console.log(`üíæ Data also saved to Supabase database`)
  }
}

// Run the script
main()
  .then(() => {
    console.log('üéâ All done!')
    process.exit(0)
  })
  .catch((error) => {
    console.error('‚ùå Error:', error)
    process.exit(1)
  })
