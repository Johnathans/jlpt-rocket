const { createClient } = require('@supabase/supabase-js')
const { v4: uuidv4 } = require('uuid')
require('dotenv').config({ path: '.env.local' })

// Initialize Supabase client
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('Missing Supabase environment variables')
  console.error('URL:', supabaseUrl)
  console.error('Key length:', supabaseKey ? supabaseKey.length : 'undefined')
  process.exit(1)
}

console.log('Supabase URL:', supabaseUrl)
console.log('Using key type:', supabaseKey === process.env.SUPABASE_SERVICE_ROLE_KEY ? 'service_role' : 'anon')

const supabase = createClient(supabaseUrl, supabaseKey)

// Common N5 vocabulary words to search for
const N5_VOCABULARY = [
  // Basic words
  '„Åì„Çì„Å´„Å°„ÅØ', '„ÅÇ„Çä„Åå„Å®„ÅÜ', '„Åô„Åø„Åæ„Åõ„Çì', '„ÅØ„ÅÑ', '„ÅÑ„ÅÑ„Åà',
  // Numbers
  '„ÅÑ„Å°', '„Å´', '„Åï„Çì', '„Çà„Çì', '„Åî', '„Çç„Åè', '„Å™„Å™', '„ÅØ„Å°', '„Åç„ÇÖ„ÅÜ', '„Åò„ÇÖ„ÅÜ',
  // Family
  '„Åã„Åû„Åè', '„Å°„Å°', '„ÅØ„ÅØ', '„ÅÇ„Å´', '„ÅÇ„Å≠', '„Åä„Å®„ÅÜ„Å®', '„ÅÑ„ÇÇ„ÅÜ„Å®',
  // Time
  '„Åò„Åã„Çì', '„ÅÑ„Åæ', '„Åç„Çá„ÅÜ', '„ÅÇ„Åó„Åü', '„Åç„ÅÆ„ÅÜ', '„ÅÇ„Åï', '„Å≤„Çã', '„Å∞„Çì',
  // Days of week
  '„Åí„Å§„Çà„ÅÜ„Å≥', '„Åã„Çà„ÅÜ„Å≥', '„Åô„ÅÑ„Çà„ÅÜ„Å≥', '„ÇÇ„Åè„Çà„ÅÜ„Å≥', '„Åç„Çì„Çà„ÅÜ„Å≥', '„Å©„Çà„ÅÜ„Å≥', '„Å´„Å°„Çà„ÅÜ„Å≥',
  // Colors
  '„ÅÇ„Åã', '„ÅÇ„Åä', '„Åç„ÅÑ„Çç', '„Åø„Å©„Çä', '„Åó„Çç', '„Åè„Çç', '„Å°„ÇÉ„ÅÑ„Çç',
  // Food
  '„Åü„Åπ„ÇÇ„ÅÆ', '„Åø„Åö', '„Åä„Å°„ÇÉ', '„Ç≥„Éº„Éí„Éº', '„Åî„ÅØ„Çì', '„Éë„É≥', '„Å´„Åè', '„Åï„Åã„Å™',
  // Places
  '„ÅÑ„Åà', '„Åå„Å£„Åì„ÅÜ', '„Å≥„Çá„ÅÜ„ÅÑ„Çì', '„Åé„Çì„Åì„ÅÜ', '„ÇÜ„ÅÜ„Å≥„Çì„Åç„Çá„Åè', '„Åà„Åç', '„Åè„ÅÜ„Åì„ÅÜ',
  // Transportation
  '„Åß„Çì„Åó„ÇÉ', '„Éê„Çπ', '„Çø„ÇØ„Ç∑„Éº', '„Å≤„Åì„ÅÜ„Åç', '„Åò„Å¶„Çì„Åó„ÇÉ', '„ÅÇ„Çã„Åè',
  // Verbs
  '„ÅÑ„Åè', '„Åè„Çã', '„Åã„Åà„Çã', '„Åü„Åπ„Çã', '„ÅÆ„ÇÄ', '„Åø„Çã', '„Åç„Åè', '„Çà„ÇÄ', '„Åã„Åè', '„ÅØ„Å™„Åô',
  '„Å≠„Çã', '„Åä„Åç„Çã', '„ÅØ„Åü„Çâ„Åè', '„Åπ„Çì„Åç„Çá„ÅÜ', '„ÅÇ„Åù„Å∂', '„Åã„ÅÜ', '„ÅÜ„Çã',
  // Adjectives
  '„Åä„Åä„Åç„ÅÑ', '„Å°„ÅÑ„Åï„ÅÑ', '„Åü„Åã„ÅÑ', '„ÇÑ„Åô„ÅÑ', '„ÅÇ„Åü„Çâ„Åó„ÅÑ', '„Åµ„Çã„ÅÑ', '„ÅÑ„ÅÑ', '„Çè„Çã„ÅÑ',
  '„ÅÇ„Å§„ÅÑ', '„Åï„ÇÄ„ÅÑ', '„ÅÇ„Åü„Åü„Åã„ÅÑ', '„Åô„Åö„Åó„ÅÑ', '„Åä„ÇÇ„Åó„Çç„ÅÑ', '„Å§„Åæ„Çâ„Å™„ÅÑ',
  // Body parts
  '„ÅÇ„Åü„Åæ', '„Åã„Åä', '„ÇÅ', '„ÅØ„Å™', '„Åè„Å°', '„Å¶', '„ÅÇ„Åó', '„Åã„Çâ„Å†',
  // Clothing
  '„Åµ„Åè', '„Ç∑„É£„ÉÑ', '„Ç∫„Éú„É≥', '„Çπ„Ç´„Éº„Éà', '„Åè„Å§', '„Åº„ÅÜ„Åó',
  // School
  '„Åõ„Çì„Åõ„ÅÑ', '„Åå„Åè„Åõ„ÅÑ', '„Åç„Çá„ÅÜ„Åó„Å§', '„Åª„Çì', '„Éö„É≥', '„Åà„Çì„Å¥„Å§', '„Åã„Åø',
  // Weather
  '„Å¶„Çì„Åç', '„ÅÇ„ÇÅ', '„ÇÜ„Åç', '„Åã„Åú', '„Åè„ÇÇ', '„Åü„ÅÑ„Çà„ÅÜ'
]

async function searchVocabulary(word) {
  try {
    console.log(`Searching for: ${word}`)
    
    // Use Jisho.org API directly
    const response = await fetch(`https://jisho.org/api/v1/search/words?keyword=${encodeURIComponent(word)}`)
    const result = await response.json()
    
    if (!result.data || result.data.length === 0) {
      console.log(`No results found for: ${word}`)
      return null
    }

    const firstResult = result.data[0]
    
    // Extract Japanese word and reading
    const japanese = firstResult.japanese?.[0]
    if (!japanese) {
      console.log(`No Japanese data found for: ${word}`)
      return null
    }

    const wordText = japanese.word || japanese.reading || word
    const reading = japanese.reading || word
    
    // Extract English meanings
    const senses = firstResult.senses || []
    const meanings = senses
      .flatMap(sense => sense.english_definitions || [])
      .slice(0, 3) // Take first 3 meanings
      .join('; ')

    if (!meanings) {
      console.log(`No meanings found for: ${word}`)
      return null
    }

    // Extract parts of speech
    const partsOfSpeech = senses
      .flatMap(sense => sense.parts_of_speech || [])
      .filter((pos, index, arr) => arr.indexOf(pos) === index) // Remove duplicates
      .slice(0, 2) // Take first 2
      .join(', ')

    // Extract kanji characters from the word
    const kanjiRegex = /[\u4e00-\u9faf]/g
    const kanjiUsed = wordText.match(kanjiRegex) || []

    // Generate a simple example sentence
    const exampleSentence = `${wordText}„Åß„Åô„ÄÇ`
    const exampleTranslation = `It is ${meanings.split(';')[0]}.`

    return {
      id: uuidv4(),
      word: wordText,
      reading: reading,
      meaning: meanings,
      part_of_speech: partsOfSpeech || 'noun',
      jlpt_level: 'N5',
      frequency_rank: 0, // We'll set this based on our list order
      kanji_used: kanjiUsed,
      example_sentence: exampleSentence,
      example_translation: exampleTranslation
    }

  } catch (error) {
    console.error(`Error searching for ${word}:`, error)
    return null
  }
}

async function populateN5Vocabulary() {
  console.log('Starting N5 vocabulary population...')
  
  const vocabularyEntries = []
  
  // Process first 20 words to test
  const testWords = N5_VOCABULARY.slice(0, 20)
  
  for (let i = 0; i < testWords.length; i++) {
    const word = testWords[i]
    
    const entry = await searchVocabulary(word)
    if (entry) {
      entry.frequency_rank = i + 1 // Set frequency based on our list order
      vocabularyEntries.push(entry)
      console.log(`‚úì Added: ${entry.word} (${entry.reading}) - ${entry.meaning}`)
    }
    
    // Add delay to avoid rate limiting
    await new Promise(resolve => setTimeout(resolve, 1000))
  }

  console.log(`\nFound ${vocabularyEntries.length} vocabulary entries`)
  
  if (vocabularyEntries.length === 0) {
    console.log('No vocabulary entries to insert')
    return
  }

  // Insert into Supabase
  console.log('Inserting into Supabase...')
  
  const { data, error } = await supabase
    .from('vocabulary')
    .insert(vocabularyEntries)
    .select()

  if (error) {
    console.error('Error inserting vocabulary:', error)
    throw error
  }

  console.log(`‚úÖ Successfully inserted ${data?.length || 0} vocabulary entries into Supabase`)
  
  // Show summary
  console.log('\nüìä Summary:')
  console.log(`- Total words processed: ${testWords.length}`)
  console.log(`- Successfully found: ${vocabularyEntries.length}`)
  console.log(`- Inserted into database: ${data?.length || 0}`)
}

// Run the script
populateN5Vocabulary()
  .then(() => {
    console.log('‚úÖ N5 vocabulary population completed!')
    process.exit(0)
  })
  .catch((error) => {
    console.error('‚ùå Error:', error)
    process.exit(1)
  })
